//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ServiceHost.CalcService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CalcService.ICalculator")]
    public interface ICalculator {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Sum", ReplyAction="http://tempuri.org/ICalculator/SumResponse")]
        double Sum(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Sum", ReplyAction="http://tempuri.org/ICalculator/SumResponse")]
        System.Threading.Tasks.Task<double> SumAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Minus", ReplyAction="http://tempuri.org/ICalculator/MinusResponse")]
        double Minus(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Minus", ReplyAction="http://tempuri.org/ICalculator/MinusResponse")]
        System.Threading.Tasks.Task<double> MinusAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Mult", ReplyAction="http://tempuri.org/ICalculator/MultResponse")]
        double Mult(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Mult", ReplyAction="http://tempuri.org/ICalculator/MultResponse")]
        System.Threading.Tasks.Task<double> MultAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Div", ReplyAction="http://tempuri.org/ICalculator/DivResponse")]
        double Div(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Div", ReplyAction="http://tempuri.org/ICalculator/DivResponse")]
        System.Threading.Tasks.Task<double> DivAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/SquareRoot", ReplyAction="http://tempuri.org/ICalculator/SquareRootResponse")]
        double SquareRoot(double a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/SquareRoot", ReplyAction="http://tempuri.org/ICalculator/SquareRootResponse")]
        System.Threading.Tasks.Task<double> SquareRootAsync(double a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Percent", ReplyAction="http://tempuri.org/ICalculator/PercentResponse")]
        double Percent(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Percent", ReplyAction="http://tempuri.org/ICalculator/PercentResponse")]
        System.Threading.Tasks.Task<double> PercentAsync(double a, double b);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorChannel : ServiceHost.CalcService.ICalculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorClient : System.ServiceModel.ClientBase<ServiceHost.CalcService.ICalculator>, ServiceHost.CalcService.ICalculator {
        
        public CalculatorClient() {
        }
        
        public CalculatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double Sum(double a, double b) {
            return base.Channel.Sum(a, b);
        }
        
        public System.Threading.Tasks.Task<double> SumAsync(double a, double b) {
            return base.Channel.SumAsync(a, b);
        }
        
        public double Minus(double a, double b) {
            return base.Channel.Minus(a, b);
        }
        
        public System.Threading.Tasks.Task<double> MinusAsync(double a, double b) {
            return base.Channel.MinusAsync(a, b);
        }
        
        public double Mult(double a, double b) {
            return base.Channel.Mult(a, b);
        }
        
        public System.Threading.Tasks.Task<double> MultAsync(double a, double b) {
            return base.Channel.MultAsync(a, b);
        }
        
        public double Div(double a, double b) {
            return base.Channel.Div(a, b);
        }
        
        public System.Threading.Tasks.Task<double> DivAsync(double a, double b) {
            return base.Channel.DivAsync(a, b);
        }
        
        public double SquareRoot(double a) {
            return base.Channel.SquareRoot(a);
        }
        
        public System.Threading.Tasks.Task<double> SquareRootAsync(double a) {
            return base.Channel.SquareRootAsync(a);
        }
        
        public double Percent(double a, double b) {
            return base.Channel.Percent(a, b);
        }
        
        public System.Threading.Tasks.Task<double> PercentAsync(double a, double b) {
            return base.Channel.PercentAsync(a, b);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CalcService.IEngineerCalculator")]
    public interface IEngineerCalculator {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngineerCalculator/Sin", ReplyAction="http://tempuri.org/IEngineerCalculator/SinResponse")]
        double Sin(double a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngineerCalculator/Sin", ReplyAction="http://tempuri.org/IEngineerCalculator/SinResponse")]
        System.Threading.Tasks.Task<double> SinAsync(double a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngineerCalculator/Cos", ReplyAction="http://tempuri.org/IEngineerCalculator/CosResponse")]
        double Cos(double a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngineerCalculator/Cos", ReplyAction="http://tempuri.org/IEngineerCalculator/CosResponse")]
        System.Threading.Tasks.Task<double> CosAsync(double a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngineerCalculator/Square", ReplyAction="http://tempuri.org/IEngineerCalculator/SquareResponse")]
        double Square(double a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngineerCalculator/Square", ReplyAction="http://tempuri.org/IEngineerCalculator/SquareResponse")]
        System.Threading.Tasks.Task<double> SquareAsync(double a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngineerCalculator/Triple", ReplyAction="http://tempuri.org/IEngineerCalculator/TripleResponse")]
        double Triple(double a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngineerCalculator/Triple", ReplyAction="http://tempuri.org/IEngineerCalculator/TripleResponse")]
        System.Threading.Tasks.Task<double> TripleAsync(double a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngineerCalculator/Pow", ReplyAction="http://tempuri.org/IEngineerCalculator/PowResponse")]
        double Pow(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngineerCalculator/Pow", ReplyAction="http://tempuri.org/IEngineerCalculator/PowResponse")]
        System.Threading.Tasks.Task<double> PowAsync(double a, double b);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngineerCalculator/Tan", ReplyAction="http://tempuri.org/IEngineerCalculator/TanResponse")]
        double Tan(double a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngineerCalculator/Tan", ReplyAction="http://tempuri.org/IEngineerCalculator/TanResponse")]
        System.Threading.Tasks.Task<double> TanAsync(double a);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngineerCalculator/Factorial", ReplyAction="http://tempuri.org/IEngineerCalculator/FactorialResponse")]
        long Factorial(int n);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngineerCalculator/Factorial", ReplyAction="http://tempuri.org/IEngineerCalculator/FactorialResponse")]
        System.Threading.Tasks.Task<long> FactorialAsync(int n);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngineerCalculator/Log", ReplyAction="http://tempuri.org/IEngineerCalculator/LogResponse")]
        double Log(double n);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IEngineerCalculator/Log", ReplyAction="http://tempuri.org/IEngineerCalculator/LogResponse")]
        System.Threading.Tasks.Task<double> LogAsync(double n);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IEngineerCalculatorChannel : ServiceHost.CalcService.IEngineerCalculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EngineerCalculatorClient : System.ServiceModel.ClientBase<ServiceHost.CalcService.IEngineerCalculator>, ServiceHost.CalcService.IEngineerCalculator {
        
        public EngineerCalculatorClient() {
        }
        
        public EngineerCalculatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public EngineerCalculatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EngineerCalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public EngineerCalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double Sin(double a) {
            return base.Channel.Sin(a);
        }
        
        public System.Threading.Tasks.Task<double> SinAsync(double a) {
            return base.Channel.SinAsync(a);
        }
        
        public double Cos(double a) {
            return base.Channel.Cos(a);
        }
        
        public System.Threading.Tasks.Task<double> CosAsync(double a) {
            return base.Channel.CosAsync(a);
        }
        
        public double Square(double a) {
            return base.Channel.Square(a);
        }
        
        public System.Threading.Tasks.Task<double> SquareAsync(double a) {
            return base.Channel.SquareAsync(a);
        }
        
        public double Triple(double a) {
            return base.Channel.Triple(a);
        }
        
        public System.Threading.Tasks.Task<double> TripleAsync(double a) {
            return base.Channel.TripleAsync(a);
        }
        
        public double Pow(double a, double b) {
            return base.Channel.Pow(a, b);
        }
        
        public System.Threading.Tasks.Task<double> PowAsync(double a, double b) {
            return base.Channel.PowAsync(a, b);
        }
        
        public double Tan(double a) {
            return base.Channel.Tan(a);
        }
        
        public System.Threading.Tasks.Task<double> TanAsync(double a) {
            return base.Channel.TanAsync(a);
        }
        
        public long Factorial(int n) {
            return base.Channel.Factorial(n);
        }
        
        public System.Threading.Tasks.Task<long> FactorialAsync(int n) {
            return base.Channel.FactorialAsync(n);
        }
        
        public double Log(double n) {
            return base.Channel.Log(n);
        }
        
        public System.Threading.Tasks.Task<double> LogAsync(double n) {
            return base.Channel.LogAsync(n);
        }
    }
}
